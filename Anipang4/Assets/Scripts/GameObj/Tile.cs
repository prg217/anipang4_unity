using Unity.VisualScripting;
using UnityEngine;

public class Tile : MonoBehaviour
{
    #region 변수

    [SerializeField]
    TileType m_tileType = TileType.NULL;

    [SerializeField]
    // 타일에 블록이 없을 때 어느 타일에서 블록을 받아올지 셋팅
    // 만약 값이 nullptr이라면 "생성 타일"로 본다.
    GameObject m_upTile;

    #region 타일이 보유 한 자식 오브젝트
    [SerializeField]
    GameObject m_myBlock;
    GameObject m_myFrontObstacle;
    GameObject m_myBackObstacle;
    #endregion

    #region 자신의 위치(행렬)
    [SerializeField]
    Vector2Int m_matrix;
    #endregion

    #endregion 변수 끝

    #region Get함수
    public GameObject GetMyBlock() {  return m_myBlock; }
    // -1 : 블록 없음, 0 : 움직일 수 없음, 1 : 움직일 수 있음
    public TileType GetTileType() { return m_tileType; }
    public Vector2Int GetMatrix() { return m_matrix; }
    public BlockType GetMyBlockType() { return m_myBlock.GetComponent<Block>().GetBlockType(); }
    public bool IsBlockEmpty()
    {
        if (GetMyBlockType() == BlockType.NONE)
        {
            return true;
        }
        return false;
    }
    #endregion

    #region Set함수
    public void SetMyBlockType(in BlockType _BlockType)
    {
        m_myBlock.GetComponent<Block>().SetBlockType(_BlockType);
    }
    #endregion

    void Awake()
    {
        Refresh();
    }

    // Start is called once before the first execution of Update after the MonoBehaviour is created
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {
   
    }

    // 자신의 정보 새로고침
    public void Refresh()
    {
        #region 자식 오브젝트를 변수에 넣기
        Transform child = transform.Find("Block");
        if (child != null)
        {
            m_myBlock = child.gameObject;
        }
        else
        {
            // Block이 없으면 null 타일이므로 초기 설정을 하지 않는다.
            return;
        }
        child = transform.Find("Front_Obstacle");
        if (child != null)
        {
            m_myFrontObstacle = child.gameObject;
        }
        child = transform.Find("Back_Obstacle");
        if (child != null)
        {
            m_myBackObstacle = child.gameObject;
        }
        #endregion

        #region 타일 안의 블록이 움직일 수 있는 상태인가
        if (CheckMove())
        {
            m_tileType = TileType.MOVABLE;
        }
        else
        {
            m_tileType = TileType.IMMOVABLE;
        }
        #endregion
    }

    // 블록이 이동할 수 있는지에 대해 반환
    bool CheckMove()
    {
        if (m_myBlock == null)
        {
            return false;
        }

        // 움직일 수 없는 장애물이 있나 판단
        bool isEmpty = m_myFrontObstacle.GetComponent<Obstacle>().GetIsEmpty();
        if (!isEmpty)
        {
            return false;
        }

        // 블록이 비어 있는 경우
        isEmpty = m_myBlock.GetComponent<Block>().GetIsEmpty();
        if (isEmpty)
        {
            return false;
        }

        return true;
    }

    // 생성 타일일 때 블록을 랜덤 생성
    void CreateBlock()
    {
        if (m_myBlock == null)
        {
            return;
        }

        // StageMgr에서 설정된 블록 값으로 랜덤한 값
        int maxRandom = StageMgr.Instance.GetMaxBlockType();
        int random = Random.Range(0, maxRandom + 1);
        m_myBlock.GetComponent<Block>().SetBlockType((BlockType)random);
    }

    public void EmptyMoving()
    {
        Debug.Log(m_matrix);
        if (m_upTile != null)
        {
            MoveMgr.Instance.SetClickedTileAndMoving(transform.gameObject, m_upTile);
        }
        else
        {
            CreateBlock();
        }
    }
}
